package med4.game_of_oose.entities;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;

import med4.game_of_oose.gamestate.ApplicationState;
import med4.game_of_oose.main.ApplicationPanel;
import med4.game_of_oose.objects.Block;
import med4.game_of_oose.physics.Collision;

public class Player {
	
	//movement booleans
	private boolean right = false, left = false, jumping = false, falling = false;
	private boolean topCollision = false;
	
	//bounds
	private double x, y;
	private int width, height;
	
	//move speed
	private double moveSpeed = 2.5;
	
	//Jump speed
	private double jumpSpeed = 8;
	private double currentJumpSpeed = jumpSpeed;
	
	//fall speed
	private double maxFallSpeed = 16;
	private double currentFallSpeed = 0.2;
	
	public Player(int width, int height) {
		x = ApplicationPanel.WIDTH/2;
		y = ApplicationPanel.HEIGHT/2;
		this.width = width;
		this.height = height;
	}
	
	public void tick(Block[] b) {
		
		int iX = (int)x;
		int iY = (int)y;
		
		for(int i = 0; i < b.length; i++){
			
			//right
			if(Collision.playerBlock(new Point(iX + width + (int)ApplicationState.xOffset, iY + (int)ApplicationState.yOffset + 2), b[i])
					|| Collision.playerBlock(new Point(iX + width + (int)ApplicationState.xOffset, iY + height + (int)ApplicationState.yOffset - 1), b[i])){
					right=false;
			}
			
			//left
			if(Collision.playerBlock(new Point(iX + (int)ApplicationState.xOffset- 1, iY + (int)ApplicationState.yOffset + 2), b[i])
					|| Collision.playerBlock(new Point(iX + (int)ApplicationState.xOffset - 1, iY + height + (int)ApplicationState.yOffset - 1), b[i])){
					left=false;
			}
			
			//top
			if(Collision.playerBlock(new Point(iX + (int)ApplicationState.xOffset + 1, iY + (int)ApplicationState.yOffset), b[i]) 
					|| Collision.playerBlock(new Point(iX + width + (int)ApplicationState.xOffset - 1, iY + (int)ApplicationState.yOffset), b[i])){
					jumping = false;
					falling = true;
			}
			//bottom
			if(Collision.playerBlock(new Point(iX + (int)ApplicationState.xOffset + 2, iY + height + (int)ApplicationState.yOffset + 1), b[i]) 
					|| Collision.playerBlock(new Point(iX + width + (int)ApplicationState.xOffset - 1, iY + height + (int)ApplicationState.yOffset + 1), b[i])){
				y = b[i].getY() - height - ApplicationState.yOffset;	
				falling = false;
					topCollision = true;
			} else {
				if(!topCollision && !jumping) {
					falling = true;
				}
			}
		}
		
		topCollision = false;
		
		if(right){
			ApplicationState.xOffset += moveSpeed;
		}
		if(left){
			ApplicationState.xOffset -= moveSpeed;
		}
		if(jumping){
			ApplicationState.yOffset -= currentJumpSpeed;
			
			currentJumpSpeed -= 0.2;
			
			if(currentJumpSpeed<=0){
				currentJumpSpeed=jumpSpeed;
				jumping= false;
				falling=true;
			}
		}
		if(falling){
			ApplicationState.yOffset+=currentFallSpeed;
			
			if(currentFallSpeed<maxFallSpeed) {
				currentFallSpeed+=0.2;
			}
		}
		
		if(!falling){
			currentFallSpeed=0.2;
		}
	}
	
	public void draw(Graphics g) {
		g.setColor(Color.BLACK);
		g.fillRect((int)x, (int)y, width, height);
	}
	
	public void keyPressed(int k) {
		if(k == KeyEvent.VK_D) right = true;
		if(k == KeyEvent.VK_A) left = true;
		if(k == KeyEvent.VK_SPACE && !jumping && !falling) jumping = true;
	}
	
	public void keyReleased(int k) {
		if(k == KeyEvent.VK_D) right = false;
		if(k == KeyEvent.VK_A) left = false;
	}
}
